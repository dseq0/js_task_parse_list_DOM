{"version":3,"sources":["scripts/main.js"],"names":["employeesList","document","querySelectorAll","sortList","list","salaryToFloat","salary","parseFloat","replace","sortedList","sort","a","b","salaryA","dataset","salaryB","querySelector","append","getEmployees","map","employee","name","innerText","position","age"],"mappings":";AAAA,aA+BA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA7BA,IAAMA,EAAgBC,SAASC,iBAAiB,MAEhD,SAASC,EAASC,GAAM,IAAA,EAChBC,EAAgB,SAACC,GACrBC,OAAAA,WAAWD,EAAOE,QAAQ,IAAK,IAAIA,QAAQ,IAAK,OAG5CC,EAAa,EAAIL,GAAMM,KAAK,SAACC,EAAGC,GAC9BC,IAAAA,EAAUR,EAAcM,EAAEG,QAAQR,QAClCS,EAAUV,EAAcO,EAAEE,QAAQR,QAEjCO,OAAAA,IAAYE,EAAU,EAAIF,EAAUE,EAAU,GAAK,KAG5Dd,EAAAA,SAASe,cAAc,OAAMC,OAAUR,MAAAA,EAAAA,EAAAA,IAGzC,SAASS,EAAad,GACb,OAAA,EAAIA,GAAMe,IAAI,SAAAC,GACZ,MAAA,CACLC,KAAMD,EAASE,UACfC,SAAUH,EAASN,QAAQS,SAC3BjB,OAAQc,EAASN,QAAQR,OACzBkB,IAAKJ,EAASN,QAAQU,OAK5BrB,EAASH,GACTkB,EAAalB","file":"main.05a056be.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employeesList = document.querySelectorAll('li');\n\nfunction sortList(list) {\n  const salaryToFloat = (salary) => (\n    parseFloat(salary.replace('$', '').replace(',', '.'))\n  );\n\n  const sortedList = [...list].sort((a, b) => {\n    const salaryA = salaryToFloat(a.dataset.salary);\n    const salaryB = salaryToFloat(b.dataset.salary);\n\n    return salaryA === salaryB ? 0 : salaryA < salaryB ? 1 : -1;\n  });\n\n  document.querySelector('ul').append(...sortedList);\n}\n\nfunction getEmployees(list) {\n  return [...list].map(employee => {\n    return {\n      name: employee.innerText,\n      position: employee.dataset.position,\n      salary: employee.dataset.salary,\n      age: employee.dataset.age,\n    };\n  });\n}\n\nsortList(employeesList);\ngetEmployees(employeesList);\n"]}